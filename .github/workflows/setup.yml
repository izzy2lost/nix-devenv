name: Android Build with Termux

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        abi: ["armeabi-v7a", "arm64-v8a"] # The matrix for two ABI versions

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Install Nix
        uses: cachix/install-nix-action@v30
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Verify Nix Installation
        run: nix --version

      - name: Install Cachix
        run: nix-env -iA cachix -f https://cachix.org/api/v1/install

      - name: Configure Nix for Trusted Users
        run: |
          echo "trusted-users = root ${USER}" | sudo tee -a /etc/nix/nix.conf
          sudo pkill nix-daemon
          
      - name: Use Devenv Cache from Cachix
        run: cachix use devenv

      - name: Install Devenv
        run: nix-env -iA devenv -f https://github.com/NixOS/nixpkgs/tarball/nixpkgs-unstable

      - name: Initialize Devenv Environment
        run: devenv init

      - name: Download Termux APK
        run: wget https://f-droid.org/repo/com.termux_1020.apk -O termux.apk

      - name: Accept Android SDK Licenses
        run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
      
      - name: Set Up Android Emulator with Nix
        run: |
          echo 'with import <nixpkgs> {
            config = {
              android_sdk.accept_license = true;
              allowUnfree = true;
            };
          };
          
          let
            androidComposition = androidenv.composeAndroidPackages {
              cmdLineToolsVersion = "8.0";
              toolsVersion = "26.1.1";
              platformToolsVersion = "33.0.3";
              buildToolsVersions = [ "30.0.3" ];
              includeEmulator = true;
              emulatorVersion = "31.3.10";
              platformVersions = [ "28" "29" "30" ];
              includeSources = false;
              includeSystemImages = true;
              systemImageTypes = [ "default" ];
              abiVersions = [ "${{ matrix.abi }}" ];
              cmakeVersions = [ "3.10.2" ];
              includeNDK = true;
              ndkVersions = ["22.0.7026061"];
              useGoogleAPIs = false;
              useGoogleTVAddOns = false;
              includeExtras = [
                "extras;google;gcm"
              ];
            };
          in
          androidComposition.androidsdk' > android-emulator.nix

          nix-build android-emulator.nix
          
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3
        
      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

- name: create AVD and generate snapshot for caching
  if: steps.avd-cache.outputs.cache-hit != 'true'
  uses: reactivecircus/android-emulator-runner@v2
  with:
    api-level: ${{ matrix.api-level }}
    force-avd-creation: false
    emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
    disable-animations: false
    script: echo "Generated AVD snapshot for caching."

- name: run tests
  uses: reactivecircus/android-emulator-runner@v2
  with:
    api-level: ${{ matrix.api-level }}
    force-avd-creation: false
    emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
    disable-animations: true
    script: |
      adb install termux.apk
      adb shell am start -n com.termux/.app.TermuxActivity
      sleep 5
      adb shell "su -c 'termux-setup-storage'"
      sleep 5
      adb push baserom.us.z64 /data/data/com.termux/files/home/
      adb push myscript.sh /data/data/com.termux/files/home/
      adb shell "su -c 'bash /data/data/com.termux/files/home/myscript.sh'"
      # Wait for APK build
      echo "Waiting for APK build to complete..."
      timeout=1800
      elapsed=0
      while [ $elapsed -lt $timeout ]; do
        if adb shell test -f "/data/data/com.termux/files/home/build/us_pc/sm64coopdx.apk"; then
          echo "APK found."
          break
        fi
        sleep 60
        elapsed=$((elapsed + 60))
      done
      adb pull /data/data/com.termux/files/home/build/us_pc/sm64coopdx.apk sm64coopdx-${{ matrix.abi }}.apk

- name: Upload Build Artifact
  uses: actions/upload-artifact@v4
  with:
    name: sm64coopdx-${{ matrix.abi }}
    path: sm64coopdx-${{ matrix.abi }}.apk
